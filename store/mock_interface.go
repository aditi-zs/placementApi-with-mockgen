// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	entities "github.com/aditi-zs/Placement-API/entities"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStudentStore is a mock of StudentStore interface.
type MockStudentStore struct {
	ctrl     *gomock.Controller
	recorder *MockStudentStoreMockRecorder
}

// MockStudentStoreMockRecorder is the mock recorder for MockStudentStore.
type MockStudentStoreMockRecorder struct {
	mock *MockStudentStore
}

// NewMockStudentStore creates a new mock instance.
func NewMockStudentStore(ctrl *gomock.Controller) *MockStudentStore {
	mock := &MockStudentStore{ctrl: ctrl}
	mock.recorder = &MockStudentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentStore) EXPECT() *MockStudentStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStudentStore) Create(ctx context.Context, stu *entities.Student) (entities.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, stu)
	ret0, _ := ret[0].(entities.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStudentStoreMockRecorder) Create(ctx, stu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStudentStore)(nil).Create), ctx, stu)
}

// Delete mocks base method.
func (m *MockStudentStore) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStudentStoreMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStudentStore)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockStudentStore) Get(ctx context.Context, name, branch string) ([]entities.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, branch)
	ret0, _ := ret[0].([]entities.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStudentStoreMockRecorder) Get(ctx, name, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStudentStore)(nil).Get), ctx, name, branch)
}

// GetByID mocks base method.
func (m *MockStudentStore) GetByID(ctx context.Context, id uuid.UUID) (entities.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entities.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStudentStoreMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStudentStore)(nil).GetByID), ctx, id)
}

// GetCompanyByID mocks base method.
func (m *MockStudentStore) GetCompanyByID(ctx context.Context, id uuid.UUID) (entities.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByID", ctx, id)
	ret0, _ := ret[0].(entities.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByID indicates an expected call of GetCompanyByID.
func (mr *MockStudentStoreMockRecorder) GetCompanyByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByID", reflect.TypeOf((*MockStudentStore)(nil).GetCompanyByID), ctx, id)
}

// GetWithCompany mocks base method.
func (m *MockStudentStore) GetWithCompany(ctx context.Context, name, branch string) ([]entities.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithCompany", ctx, name, branch)
	ret0, _ := ret[0].([]entities.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithCompany indicates an expected call of GetWithCompany.
func (mr *MockStudentStoreMockRecorder) GetWithCompany(ctx, name, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithCompany", reflect.TypeOf((*MockStudentStore)(nil).GetWithCompany), ctx, name, branch)
}

// Update mocks base method.
func (m *MockStudentStore) Update(ctx context.Context, id uuid.UUID, stu *entities.Student) (entities.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, stu)
	ret0, _ := ret[0].(entities.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStudentStoreMockRecorder) Update(ctx, id, stu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStudentStore)(nil).Update), ctx, id, stu)
}

// MockCompanyStore is a mock of CompanyStore interface.
type MockCompanyStore struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyStoreMockRecorder
}

// MockCompanyStoreMockRecorder is the mock recorder for MockCompanyStore.
type MockCompanyStoreMockRecorder struct {
	mock *MockCompanyStore
}

// NewMockCompanyStore creates a new mock instance.
func NewMockCompanyStore(ctrl *gomock.Controller) *MockCompanyStore {
	mock := &MockCompanyStore{ctrl: ctrl}
	mock.recorder = &MockCompanyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyStore) EXPECT() *MockCompanyStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCompanyStore) Create(ctx context.Context, cmp entities.Company) (entities.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, cmp)
	ret0, _ := ret[0].(entities.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCompanyStoreMockRecorder) Create(ctx, cmp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCompanyStore)(nil).Create), ctx, cmp)
}

// Delete mocks base method.
func (m *MockCompanyStore) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCompanyStoreMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCompanyStore)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockCompanyStore) Get(ctx context.Context) ([]entities.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].([]entities.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCompanyStoreMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCompanyStore)(nil).Get), ctx)
}

// GetByID mocks base method.
func (m *MockCompanyStore) GetByID(ctx context.Context, id uuid.UUID) (entities.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entities.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCompanyStoreMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCompanyStore)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockCompanyStore) Update(ctx context.Context, id uuid.UUID, cmp entities.Company) (entities.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, cmp)
	ret0, _ := ret[0].(entities.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCompanyStoreMockRecorder) Update(ctx, id, cmp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCompanyStore)(nil).Update), ctx, id, cmp)
}
